;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.10
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

(defpackage bullet-physics
  (:use :cl :alexandria)
  (:nicknames bullet)
  (:documentation "Bullet is a Collision Detection and Rigid Body Dynamics
 Library.  The Library is Open Source and free for commercial use, under the
 zlib.  The C++ documentation is at bulletphysics.org; this is a simple
 wrapper to make Bullet available to Common Lisp programs."))

(in-package :bullet-physics)

      


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (cl:&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cffi:defcstruct #.(bullet-wrap::swig-lispify "LocalShapeInfo" 'classname)
	(#.(bullet-wrap::swig-lispify "m_shapePart" 'slotname) :int)
	(#.(bullet-wrap::swig-lispify "m_triangleIndex" 'slotname) :int))

(cl:export '#.(bullet-wrap::swig-lispify "LocalShapeInfo" 'classname))

(cl:export '#.(bullet-wrap::swig-lispify "m_shapePart" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_triangleIndex" 'slotname))

(cffi:defcstruct #.(bullet-wrap::swig-lispify "LocalRayResult" 'classname)
	(#.(bullet-wrap::swig-lispify "m_collisionObject" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_localShapeInfo" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_hitNormalLocal" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_hitFraction" 'slotname) :float))

(cl:export '#.(bullet-wrap::swig-lispify "LocalRayResult" 'classname))

(cl:export '#.(bullet-wrap::swig-lispify "m_collisionObject" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_localShapeInfo" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_hitNormalLocal" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_hitFraction" 'slotname))

(cffi:defcstruct #.(bullet-wrap::swig-lispify "RayResultCallback" 'classname)
	(#.(bullet-wrap::swig-lispify "m_closestHitFraction" 'slotname) :float)
	(#.(bullet-wrap::swig-lispify "m_collisionObject" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_collisionFilterGroup" 'slotname) :short)
	(#.(bullet-wrap::swig-lispify "m_collisionFilterMask" 'slotname) :short)
	(#.(bullet-wrap::swig-lispify "m_flags" 'slotname) :unsigned-int)
	(#.(bullet-wrap::swig-lispify "hasHit" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "needsCollision" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "addSingleResult" 'slotname) :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "RayResultCallback" 'classname))

(cl:export '#.(bullet-wrap::swig-lispify "m_closestHitFraction" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_collisionObject" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_collisionFilterGroup" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_collisionFilterMask" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_flags" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "hasHit" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "needsCollision" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "addSingleResult" 'slotname))

(cffi:defcstruct #.(bullet-wrap::swig-lispify "ClosestRayResultCallback" 'classname)
	(#.(bullet-wrap::swig-lispify "m_rayFromWorld" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_rayToWorld" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_hitNormalWorld" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_hitPointWorld" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "addSingleResult" 'slotname) :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "ClosestRayResultCallback" 'classname))

(cl:export '#.(bullet-wrap::swig-lispify "m_rayFromWorld" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_rayToWorld" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_hitNormalWorld" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_hitPointWorld" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "addSingleResult" 'slotname))

(cffi:defcstruct #.(bullet-wrap::swig-lispify "AllHitsRayResultCallback" 'classname)
	(#.(bullet-wrap::swig-lispify "m_collisionObjects" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_rayFromWorld" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_rayToWorld" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_hitNormalWorld" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_hitPointWorld" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_hitFractions" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "addSingleResult" 'slotname) :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "AllHitsRayResultCallback" 'classname))

(cl:export '#.(bullet-wrap::swig-lispify "m_collisionObjects" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_rayFromWorld" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_rayToWorld" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_hitNormalWorld" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_hitPointWorld" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_hitFractions" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "addSingleResult" 'slotname))

(cffi:defcstruct #.(bullet-wrap::swig-lispify "LocalConvexResult" 'classname)
	(#.(bullet-wrap::swig-lispify "m_hitCollisionObject" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_localShapeInfo" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_hitNormalLocal" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_hitPointLocal" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_hitFraction" 'slotname) :float))

(cl:export '#.(bullet-wrap::swig-lispify "LocalConvexResult" 'classname))

(cl:export '#.(bullet-wrap::swig-lispify "m_hitCollisionObject" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_localShapeInfo" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_hitNormalLocal" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_hitPointLocal" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_hitFraction" 'slotname))

(cffi:defcstruct #.(bullet-wrap::swig-lispify "ConvexResultCallback" 'classname)
	(#.(bullet-wrap::swig-lispify "m_closestHitFraction" 'slotname) :float)
	(#.(bullet-wrap::swig-lispify "m_collisionFilterGroup" 'slotname) :short)
	(#.(bullet-wrap::swig-lispify "m_collisionFilterMask" 'slotname) :short)
	(#.(bullet-wrap::swig-lispify "hasHit" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "needsCollision" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "addSingleResult" 'slotname) :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "ConvexResultCallback" 'classname))

(cl:export '#.(bullet-wrap::swig-lispify "m_closestHitFraction" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_collisionFilterGroup" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_collisionFilterMask" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "hasHit" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "needsCollision" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "addSingleResult" 'slotname))

(cffi:defcstruct #.(bullet-wrap::swig-lispify "ClosestConvexResultCallback" 'classname)
	(#.(bullet-wrap::swig-lispify "m_convexFromWorld" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_convexToWorld" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_hitNormalWorld" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_hitPointWorld" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_hitCollisionObject" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "addSingleResult" 'slotname) :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "ClosestConvexResultCallback" 'classname))

(cl:export '#.(bullet-wrap::swig-lispify "m_convexFromWorld" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_convexToWorld" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_hitNormalWorld" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_hitPointWorld" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_hitCollisionObject" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "addSingleResult" 'slotname))

(cffi:defcstruct #.(bullet-wrap::swig-lispify "ContactResultCallback" 'classname)
	(#.(bullet-wrap::swig-lispify "m_collisionFilterGroup" 'slotname) :short)
	(#.(bullet-wrap::swig-lispify "m_collisionFilterMask" 'slotname) :short)
	(#.(bullet-wrap::swig-lispify "needsCollision" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "addSingleResult" 'slotname) :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "ContactResultCallback" 'classname))

(cl:export '#.(bullet-wrap::swig-lispify "m_collisionFilterGroup" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_collisionFilterMask" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "needsCollision" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "addSingleResult" 'slotname))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "new_btCollisionWorld" 'function)))

(cffi:defcfun ("_wrap_new_btCollisionWorld" #.(bullet-wrap::swig-lispify "new_btCollisionWorld" 'function)) :pointer
  (dispatcher :pointer)
  (broadphasePairCache :pointer)
  (collisionConfiguration :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "new_btCollisionWorld" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "delete_btCollisionWorld" 'function)))

(cffi:defcfun ("_wrap_delete_btCollisionWorld" #.(bullet-wrap::swig-lispify "delete_btCollisionWorld" 'function)) :void
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "delete_btCollisionWorld" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_setBroadphase" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_setBroadphase" #.(bullet-wrap::swig-lispify "btCollisionWorld_setBroadphase" 'function)) :void
  (self :pointer)
  (pairCache :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_setBroadphase" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_getBroadphase" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_getBroadphase__SWIG_0" #.(bullet-wrap::swig-lispify "btCollisionWorld_getBroadphase" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_getBroadphase" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_getBroadphase" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_getBroadphase__SWIG_1" #.(bullet-wrap::swig-lispify "btCollisionWorld_getBroadphase" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_getBroadphase" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_getPairCache" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_getPairCache" #.(bullet-wrap::swig-lispify "btCollisionWorld_getPairCache" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_getPairCache" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_getDispatcher" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_getDispatcher__SWIG_0" #.(bullet-wrap::swig-lispify "btCollisionWorld_getDispatcher" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_getDispatcher" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_getDispatcher" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_getDispatcher__SWIG_1" #.(bullet-wrap::swig-lispify "btCollisionWorld_getDispatcher" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_getDispatcher" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_updateSingleAabb" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_updateSingleAabb" #.(bullet-wrap::swig-lispify "btCollisionWorld_updateSingleAabb" 'function)) :void
  (self :pointer)
  (colObj :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_updateSingleAabb" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_updateAabbs" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_updateAabbs" #.(bullet-wrap::swig-lispify "btCollisionWorld_updateAabbs" 'function)) :void
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_updateAabbs" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_computeOverlappingPairs" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_computeOverlappingPairs" #.(bullet-wrap::swig-lispify "btCollisionWorld_computeOverlappingPairs" 'function)) :void
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_computeOverlappingPairs" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_setDebugDrawer" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_setDebugDrawer" #.(bullet-wrap::swig-lispify "btCollisionWorld_setDebugDrawer" 'function)) :void
  (self :pointer)
  (debugDrawer :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_setDebugDrawer" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_getDebugDrawer" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_getDebugDrawer" #.(bullet-wrap::swig-lispify "btCollisionWorld_getDebugDrawer" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_getDebugDrawer" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_debugDrawWorld" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_debugDrawWorld" #.(bullet-wrap::swig-lispify "btCollisionWorld_debugDrawWorld" 'function)) :void
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_debugDrawWorld" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_debugDrawObject" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_debugDrawObject" #.(bullet-wrap::swig-lispify "btCollisionWorld_debugDrawObject" 'function)) :void
  (self :pointer)
  (worldTransform :pointer)
  (shape :pointer)
  (color :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_debugDrawObject" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_getNumCollisionObjects" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_getNumCollisionObjects" #.(bullet-wrap::swig-lispify "btCollisionWorld_getNumCollisionObjects" 'function)) :int
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_getNumCollisionObjects" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_rayTest" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_rayTest" #.(bullet-wrap::swig-lispify "btCollisionWorld_rayTest" 'function)) :void
  (self :pointer)
  (rayFromWorld :pointer)
  (rayToWorld :pointer)
  (resultCallback :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_rayTest" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_convexSweepTest" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_convexSweepTest__SWIG_0" #.(bullet-wrap::swig-lispify "btCollisionWorld_convexSweepTest" 'function)) :void
  (self :pointer)
  (castShape :pointer)
  (from :pointer)
  (to :pointer)
  (resultCallback :pointer)
  (allowedCcdPenetration :float))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_convexSweepTest" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_convexSweepTest" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_convexSweepTest__SWIG_1" #.(bullet-wrap::swig-lispify "btCollisionWorld_convexSweepTest" 'function)) :void
  (self :pointer)
  (castShape :pointer)
  (from :pointer)
  (to :pointer)
  (resultCallback :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_convexSweepTest" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_contactTest" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_contactTest" #.(bullet-wrap::swig-lispify "btCollisionWorld_contactTest" 'function)) :void
  (self :pointer)
  (colObj :pointer)
  (resultCallback :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_contactTest" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_contactPairTest" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_contactPairTest" #.(bullet-wrap::swig-lispify "btCollisionWorld_contactPairTest" 'function)) :void
  (self :pointer)
  (colObjA :pointer)
  (colObjB :pointer)
  (resultCallback :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_contactPairTest" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_rayTestSingle" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_rayTestSingle" #.(bullet-wrap::swig-lispify "btCollisionWorld_rayTestSingle" 'function)) :void
  (rayFromTrans :pointer)
  (rayToTrans :pointer)
  (collisionObject :pointer)
  (collisionShape :pointer)
  (colObjWorldTransform :pointer)
  (resultCallback :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_rayTestSingle" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_rayTestSingleInternal" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_rayTestSingleInternal" #.(bullet-wrap::swig-lispify "btCollisionWorld_rayTestSingleInternal" 'function)) :void
  (rayFromTrans :pointer)
  (rayToTrans :pointer)
  (collisionObjectWrap :pointer)
  (resultCallback :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_rayTestSingleInternal" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_objectQuerySingle" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_objectQuerySingle" #.(bullet-wrap::swig-lispify "btCollisionWorld_objectQuerySingle" 'function)) :void
  (castShape :pointer)
  (rayFromTrans :pointer)
  (rayToTrans :pointer)
  (collisionObject :pointer)
  (collisionShape :pointer)
  (colObjWorldTransform :pointer)
  (resultCallback :pointer)
  (allowedPenetration :float))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_objectQuerySingle" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_objectQuerySingleInternal" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_objectQuerySingleInternal" #.(bullet-wrap::swig-lispify "btCollisionWorld_objectQuerySingleInternal" 'function)) :void
  (castShape :pointer)
  (convexFromTrans :pointer)
  (convexToTrans :pointer)
  (colObjWrap :pointer)
  (resultCallback :pointer)
  (allowedPenetration :float))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_objectQuerySingleInternal" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_addCollisionObject" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_addCollisionObject__SWIG_0" #.(bullet-wrap::swig-lispify "btCollisionWorld_addCollisionObject" 'function)) :void
  (self :pointer)
  (collisionObject :pointer)
  (collisionFilterGroup :short)
  (collisionFilterMask :short))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_addCollisionObject" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_addCollisionObject" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_addCollisionObject__SWIG_1" #.(bullet-wrap::swig-lispify "btCollisionWorld_addCollisionObject" 'function)) :void
  (self :pointer)
  (collisionObject :pointer)
  (collisionFilterGroup :short))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_addCollisionObject" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_addCollisionObject" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_addCollisionObject__SWIG_2" #.(bullet-wrap::swig-lispify "btCollisionWorld_addCollisionObject" 'function)) :void
  (self :pointer)
  (collisionObject :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_addCollisionObject" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_getCollisionObjectArray" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_getCollisionObjectArray__SWIG_0" #.(bullet-wrap::swig-lispify "btCollisionWorld_getCollisionObjectArray" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_getCollisionObjectArray" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_getCollisionObjectArray" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_getCollisionObjectArray__SWIG_1" #.(bullet-wrap::swig-lispify "btCollisionWorld_getCollisionObjectArray" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_getCollisionObjectArray" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_removeCollisionObject" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_removeCollisionObject" #.(bullet-wrap::swig-lispify "btCollisionWorld_removeCollisionObject" 'function)) :void
  (self :pointer)
  (collisionObject :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_removeCollisionObject" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_performDiscreteCollisionDetection" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_performDiscreteCollisionDetection" #.(bullet-wrap::swig-lispify "btCollisionWorld_performDiscreteCollisionDetection" 'function)) :void
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_performDiscreteCollisionDetection" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_getDispatchInfo" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_getDispatchInfo__SWIG_0" #.(bullet-wrap::swig-lispify "btCollisionWorld_getDispatchInfo" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_getDispatchInfo" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_getDispatchInfo" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_getDispatchInfo__SWIG_1" #.(bullet-wrap::swig-lispify "btCollisionWorld_getDispatchInfo" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_getDispatchInfo" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_getForceUpdateAllAabbs" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_getForceUpdateAllAabbs" #.(bullet-wrap::swig-lispify "btCollisionWorld_getForceUpdateAllAabbs" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_getForceUpdateAllAabbs" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_setForceUpdateAllAabbs" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_setForceUpdateAllAabbs" #.(bullet-wrap::swig-lispify "btCollisionWorld_setForceUpdateAllAabbs" 'function)) :void
  (self :pointer)
  (forceUpdateAllAabbs :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_setForceUpdateAllAabbs" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionWorld_serialize" 'function)))

(cffi:defcfun ("_wrap_btCollisionWorld_serialize" #.(bullet-wrap::swig-lispify "btCollisionWorld_serialize" 'function)) :void
  (self :pointer)
  (serializer :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionWorld_serialize" 'function))

(cl:defconstant #.(bullet-wrap::swig-lispify "ACTIVE_TAG" 'constant) 1)

(cl:export '#.(bullet-wrap::swig-lispify "ACTIVE_TAG" 'constant))

(cl:defconstant #.(bullet-wrap::swig-lispify "ISLAND_SLEEPING" 'constant) 2)

(cl:export '#.(bullet-wrap::swig-lispify "ISLAND_SLEEPING" 'constant))

(cl:defconstant #.(bullet-wrap::swig-lispify "WANTS_DEACTIVATION" 'constant) 3)

(cl:export '#.(bullet-wrap::swig-lispify "WANTS_DEACTIVATION" 'constant))

(cl:defconstant #.(bullet-wrap::swig-lispify "DISABLE_DEACTIVATION" 'constant) 4)

(cl:export '#.(bullet-wrap::swig-lispify "DISABLE_DEACTIVATION" 'constant))

(cl:defconstant #.(bullet-wrap::swig-lispify "DISABLE_SIMULATION" 'constant) 5)

(cl:export '#.(bullet-wrap::swig-lispify "DISABLE_SIMULATION" 'constant))

(cl:defconstant #.(bullet-wrap::swig-lispify "btCollisionObjectDataName" 'constant) "btCollisionObjectFloatData")

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObjectDataName" 'constant))

(cffi:defcenum #.(bullet-wrap::swig-lispify "CollisionFlags" 'enumname)
	(#.(bullet-wrap::swig-lispify "CF_STATIC_OBJECT" 'enumvalue :keyword) #.1)
	(#.(bullet-wrap::swig-lispify "CF_KINEMATIC_OBJECT" 'enumvalue :keyword) #.2)
	(#.(bullet-wrap::swig-lispify "CF_NO_CONTACT_RESPONSE" 'enumvalue :keyword) #.4)
	(#.(bullet-wrap::swig-lispify "CF_CUSTOM_MATERIAL_CALLBACK" 'enumvalue :keyword) #.8)
	(#.(bullet-wrap::swig-lispify "CF_CHARACTER_OBJECT" 'enumvalue :keyword) #.16)
	(#.(bullet-wrap::swig-lispify "CF_DISABLE_VISUALIZE_OBJECT" 'enumvalue :keyword) #.32)
	(#.(bullet-wrap::swig-lispify "CF_DISABLE_SPU_COLLISION_PROCESSING" 'enumvalue :keyword) #.64))

(cl:export '#.(bullet-wrap::swig-lispify "CollisionFlags" 'enumname))

(cffi:defcenum #.(bullet-wrap::swig-lispify "CollisionObjectTypes" 'enumname)
	(#.(bullet-wrap::swig-lispify "CO_COLLISION_OBJECT" 'enumvalue :keyword) #.1)
	(#.(bullet-wrap::swig-lispify "CO_RIGID_BODY" 'enumvalue :keyword) #.2)
	(#.(bullet-wrap::swig-lispify "CO_GHOST_OBJECT" 'enumvalue :keyword) #.4)
	(#.(bullet-wrap::swig-lispify "CO_SOFT_BODY" 'enumvalue :keyword) #.8)
	(#.(bullet-wrap::swig-lispify "CO_HF_FLUID" 'enumvalue :keyword) #.16)
	(#.(bullet-wrap::swig-lispify "CO_USER_TYPE" 'enumvalue :keyword) #.32)
	(#.(bullet-wrap::swig-lispify "CO_FEATHERSTONE_LINK" 'enumvalue :keyword) #.64))

(cl:export '#.(bullet-wrap::swig-lispify "CollisionObjectTypes" 'enumname))

(cffi:defcenum #.(bullet-wrap::swig-lispify "AnisotropicFrictionFlags" 'enumname)
	(#.(bullet-wrap::swig-lispify "CF_ANISOTROPIC_FRICTION_DISABLED" 'enumvalue :keyword) #.0)
	(#.(bullet-wrap::swig-lispify "CF_ANISOTROPIC_FRICTION" 'enumvalue :keyword) #.1)
	(#.(bullet-wrap::swig-lispify "CF_ANISOTROPIC_ROLLING_FRICTION" 'enumvalue :keyword) #.2))

(cl:export '#.(bullet-wrap::swig-lispify "AnisotropicFrictionFlags" 'enumname))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_mergesSimulationIslands" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_mergesSimulationIslands" #.(bullet-wrap::swig-lispify "btCollisionObject_mergesSimulationIslands" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_mergesSimulationIslands" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_getAnisotropicFriction" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_getAnisotropicFriction" #.(bullet-wrap::swig-lispify "btCollisionObject_getAnisotropicFriction" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_getAnisotropicFriction" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_setAnisotropicFriction" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_setAnisotropicFriction__SWIG_0" #.(bullet-wrap::swig-lispify "btCollisionObject_setAnisotropicFriction" 'function)) :void
  (self :pointer)
  (anisotropicFriction :pointer)
  (frictionMode :int))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_setAnisotropicFriction" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_setAnisotropicFriction" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_setAnisotropicFriction__SWIG_1" #.(bullet-wrap::swig-lispify "btCollisionObject_setAnisotropicFriction" 'function)) :void
  (self :pointer)
  (anisotropicFriction :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_setAnisotropicFriction" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_hasAnisotropicFriction" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_hasAnisotropicFriction__SWIG_0" #.(bullet-wrap::swig-lispify "btCollisionObject_hasAnisotropicFriction" 'function)) :pointer
  (self :pointer)
  (frictionMode :int))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_hasAnisotropicFriction" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_hasAnisotropicFriction" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_hasAnisotropicFriction__SWIG_1" #.(bullet-wrap::swig-lispify "btCollisionObject_hasAnisotropicFriction" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_hasAnisotropicFriction" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_setContactProcessingThreshold" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_setContactProcessingThreshold" #.(bullet-wrap::swig-lispify "btCollisionObject_setContactProcessingThreshold" 'function)) :void
  (self :pointer)
  (contactProcessingThreshold :float))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_setContactProcessingThreshold" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_getContactProcessingThreshold" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_getContactProcessingThreshold" #.(bullet-wrap::swig-lispify "btCollisionObject_getContactProcessingThreshold" 'function)) :float
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_getContactProcessingThreshold" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_isStaticObject" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_isStaticObject" #.(bullet-wrap::swig-lispify "btCollisionObject_isStaticObject" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_isStaticObject" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_isKinematicObject" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_isKinematicObject" #.(bullet-wrap::swig-lispify "btCollisionObject_isKinematicObject" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_isKinematicObject" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_isStaticOrKinematicObject" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_isStaticOrKinematicObject" #.(bullet-wrap::swig-lispify "btCollisionObject_isStaticOrKinematicObject" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_isStaticOrKinematicObject" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_hasContactResponse" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_hasContactResponse" #.(bullet-wrap::swig-lispify "btCollisionObject_hasContactResponse" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_hasContactResponse" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "new_btCollisionObject" 'function)))

(cffi:defcfun ("_wrap_new_btCollisionObject" #.(bullet-wrap::swig-lispify "new_btCollisionObject" 'function)) :pointer)

(cl:export '#.(bullet-wrap::swig-lispify "new_btCollisionObject" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "delete_btCollisionObject" 'function)))

(cffi:defcfun ("_wrap_delete_btCollisionObject" #.(bullet-wrap::swig-lispify "delete_btCollisionObject" 'function)) :void
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "delete_btCollisionObject" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_setCollisionShape" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_setCollisionShape" #.(bullet-wrap::swig-lispify "btCollisionObject_setCollisionShape" 'function)) :void
  (self :pointer)
  (collisionShape :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_setCollisionShape" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_getCollisionShape" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_getCollisionShape__SWIG_0" #.(bullet-wrap::swig-lispify "btCollisionObject_getCollisionShape" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_getCollisionShape" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_getCollisionShape" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_getCollisionShape__SWIG_1" #.(bullet-wrap::swig-lispify "btCollisionObject_getCollisionShape" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_getCollisionShape" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_internalGetExtensionPointer" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_internalGetExtensionPointer" #.(bullet-wrap::swig-lispify "btCollisionObject_internalGetExtensionPointer" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_internalGetExtensionPointer" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_internalSetExtensionPointer" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_internalSetExtensionPointer" #.(bullet-wrap::swig-lispify "btCollisionObject_internalSetExtensionPointer" 'function)) :void
  (self :pointer)
  (pointer :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_internalSetExtensionPointer" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_getActivationState" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_getActivationState" #.(bullet-wrap::swig-lispify "btCollisionObject_getActivationState" 'function)) :int
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_getActivationState" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_setActivationState" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_setActivationState" #.(bullet-wrap::swig-lispify "btCollisionObject_setActivationState" 'function)) :void
  (self :pointer)
  (newState :int))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_setActivationState" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_setDeactivationTime" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_setDeactivationTime" #.(bullet-wrap::swig-lispify "btCollisionObject_setDeactivationTime" 'function)) :void
  (self :pointer)
  (time :float))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_setDeactivationTime" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_getDeactivationTime" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_getDeactivationTime" #.(bullet-wrap::swig-lispify "btCollisionObject_getDeactivationTime" 'function)) :float
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_getDeactivationTime" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_forceActivationState" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_forceActivationState" #.(bullet-wrap::swig-lispify "btCollisionObject_forceActivationState" 'function)) :void
  (self :pointer)
  (newState :int))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_forceActivationState" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_activate" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_activate__SWIG_0" #.(bullet-wrap::swig-lispify "btCollisionObject_activate" 'function)) :void
  (self :pointer)
  (forceActivation :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_activate" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_activate" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_activate__SWIG_1" #.(bullet-wrap::swig-lispify "btCollisionObject_activate" 'function)) :void
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_activate" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_isActive" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_isActive" #.(bullet-wrap::swig-lispify "btCollisionObject_isActive" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_isActive" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_setRestitution" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_setRestitution" #.(bullet-wrap::swig-lispify "btCollisionObject_setRestitution" 'function)) :void
  (self :pointer)
  (rest :float))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_setRestitution" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_getRestitution" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_getRestitution" #.(bullet-wrap::swig-lispify "btCollisionObject_getRestitution" 'function)) :float
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_getRestitution" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_setFriction" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_setFriction" #.(bullet-wrap::swig-lispify "btCollisionObject_setFriction" 'function)) :void
  (self :pointer)
  (frict :float))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_setFriction" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_getFriction" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_getFriction" #.(bullet-wrap::swig-lispify "btCollisionObject_getFriction" 'function)) :float
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_getFriction" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_setRollingFriction" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_setRollingFriction" #.(bullet-wrap::swig-lispify "btCollisionObject_setRollingFriction" 'function)) :void
  (self :pointer)
  (frict :float))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_setRollingFriction" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_getRollingFriction" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_getRollingFriction" #.(bullet-wrap::swig-lispify "btCollisionObject_getRollingFriction" 'function)) :float
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_getRollingFriction" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_getInternalType" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_getInternalType" #.(bullet-wrap::swig-lispify "btCollisionObject_getInternalType" 'function)) :int
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_getInternalType" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_getWorldTransform" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_getWorldTransform__SWIG_0" #.(bullet-wrap::swig-lispify "btCollisionObject_getWorldTransform" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_getWorldTransform" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_getWorldTransform" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_getWorldTransform__SWIG_1" #.(bullet-wrap::swig-lispify "btCollisionObject_getWorldTransform" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_getWorldTransform" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_setWorldTransform" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_setWorldTransform" #.(bullet-wrap::swig-lispify "btCollisionObject_setWorldTransform" 'function)) :void
  (self :pointer)
  (worldTrans :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_setWorldTransform" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_getBroadphaseHandle" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_getBroadphaseHandle__SWIG_0" #.(bullet-wrap::swig-lispify "btCollisionObject_getBroadphaseHandle" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_getBroadphaseHandle" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_getBroadphaseHandle" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_getBroadphaseHandle__SWIG_1" #.(bullet-wrap::swig-lispify "btCollisionObject_getBroadphaseHandle" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_getBroadphaseHandle" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_setBroadphaseHandle" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_setBroadphaseHandle" #.(bullet-wrap::swig-lispify "btCollisionObject_setBroadphaseHandle" 'function)) :void
  (self :pointer)
  (handle :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_setBroadphaseHandle" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_getInterpolationWorldTransform" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_getInterpolationWorldTransform__SWIG_0" #.(bullet-wrap::swig-lispify "btCollisionObject_getInterpolationWorldTransform" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_getInterpolationWorldTransform" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_getInterpolationWorldTransform" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_getInterpolationWorldTransform__SWIG_1" #.(bullet-wrap::swig-lispify "btCollisionObject_getInterpolationWorldTransform" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_getInterpolationWorldTransform" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_setInterpolationWorldTransform" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_setInterpolationWorldTransform" #.(bullet-wrap::swig-lispify "btCollisionObject_setInterpolationWorldTransform" 'function)) :void
  (self :pointer)
  (trans :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_setInterpolationWorldTransform" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_setInterpolationLinearVelocity" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_setInterpolationLinearVelocity" #.(bullet-wrap::swig-lispify "btCollisionObject_setInterpolationLinearVelocity" 'function)) :void
  (self :pointer)
  (linvel :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_setInterpolationLinearVelocity" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_setInterpolationAngularVelocity" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_setInterpolationAngularVelocity" #.(bullet-wrap::swig-lispify "btCollisionObject_setInterpolationAngularVelocity" 'function)) :void
  (self :pointer)
  (angvel :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_setInterpolationAngularVelocity" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_getInterpolationLinearVelocity" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_getInterpolationLinearVelocity" #.(bullet-wrap::swig-lispify "btCollisionObject_getInterpolationLinearVelocity" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_getInterpolationLinearVelocity" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_getInterpolationAngularVelocity" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_getInterpolationAngularVelocity" #.(bullet-wrap::swig-lispify "btCollisionObject_getInterpolationAngularVelocity" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_getInterpolationAngularVelocity" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_getIslandTag" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_getIslandTag" #.(bullet-wrap::swig-lispify "btCollisionObject_getIslandTag" 'function)) :int
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_getIslandTag" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_setIslandTag" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_setIslandTag" #.(bullet-wrap::swig-lispify "btCollisionObject_setIslandTag" 'function)) :void
  (self :pointer)
  (tag :int))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_setIslandTag" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_getCompanionId" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_getCompanionId" #.(bullet-wrap::swig-lispify "btCollisionObject_getCompanionId" 'function)) :int
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_getCompanionId" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_setCompanionId" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_setCompanionId" #.(bullet-wrap::swig-lispify "btCollisionObject_setCompanionId" 'function)) :void
  (self :pointer)
  (id :int))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_setCompanionId" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_getHitFraction" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_getHitFraction" #.(bullet-wrap::swig-lispify "btCollisionObject_getHitFraction" 'function)) :float
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_getHitFraction" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_setHitFraction" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_setHitFraction" #.(bullet-wrap::swig-lispify "btCollisionObject_setHitFraction" 'function)) :void
  (self :pointer)
  (hitFraction :float))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_setHitFraction" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_getCollisionFlags" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_getCollisionFlags" #.(bullet-wrap::swig-lispify "btCollisionObject_getCollisionFlags" 'function)) :int
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_getCollisionFlags" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_setCollisionFlags" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_setCollisionFlags" #.(bullet-wrap::swig-lispify "btCollisionObject_setCollisionFlags" 'function)) :void
  (self :pointer)
  (flags :int))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_setCollisionFlags" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_getCcdSweptSphereRadius" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_getCcdSweptSphereRadius" #.(bullet-wrap::swig-lispify "btCollisionObject_getCcdSweptSphereRadius" 'function)) :float
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_getCcdSweptSphereRadius" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_setCcdSweptSphereRadius" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_setCcdSweptSphereRadius" #.(bullet-wrap::swig-lispify "btCollisionObject_setCcdSweptSphereRadius" 'function)) :void
  (self :pointer)
  (radius :float))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_setCcdSweptSphereRadius" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_getCcdMotionThreshold" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_getCcdMotionThreshold" #.(bullet-wrap::swig-lispify "btCollisionObject_getCcdMotionThreshold" 'function)) :float
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_getCcdMotionThreshold" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_getCcdSquareMotionThreshold" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_getCcdSquareMotionThreshold" #.(bullet-wrap::swig-lispify "btCollisionObject_getCcdSquareMotionThreshold" 'function)) :float
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_getCcdSquareMotionThreshold" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_setCcdMotionThreshold" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_setCcdMotionThreshold" #.(bullet-wrap::swig-lispify "btCollisionObject_setCcdMotionThreshold" 'function)) :void
  (self :pointer)
  (ccdMotionThreshold :float))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_setCcdMotionThreshold" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_getUserPointer" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_getUserPointer" #.(bullet-wrap::swig-lispify "btCollisionObject_getUserPointer" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_getUserPointer" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_getUserIndex" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_getUserIndex" #.(bullet-wrap::swig-lispify "btCollisionObject_getUserIndex" 'function)) :int
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_getUserIndex" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_setUserPointer" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_setUserPointer" #.(bullet-wrap::swig-lispify "btCollisionObject_setUserPointer" 'function)) :void
  (self :pointer)
  (userPointer :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_setUserPointer" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_setUserIndex" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_setUserIndex" #.(bullet-wrap::swig-lispify "btCollisionObject_setUserIndex" 'function)) :void
  (self :pointer)
  (index :int))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_setUserIndex" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_getUpdateRevisionInternal" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_getUpdateRevisionInternal" #.(bullet-wrap::swig-lispify "btCollisionObject_getUpdateRevisionInternal" 'function)) :int
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_getUpdateRevisionInternal" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_checkCollideWith" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_checkCollideWith" #.(bullet-wrap::swig-lispify "btCollisionObject_checkCollideWith" 'function)) :pointer
  (self :pointer)
  (co :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_checkCollideWith" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_calculateSerializeBufferSize" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_calculateSerializeBufferSize" #.(bullet-wrap::swig-lispify "btCollisionObject_calculateSerializeBufferSize" 'function)) :int
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_calculateSerializeBufferSize" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_serialize" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_serialize" #.(bullet-wrap::swig-lispify "btCollisionObject_serialize" 'function)) :string
  (self :pointer)
  (dataBuffer :pointer)
  (serializer :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_serialize" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btCollisionObject_serializeSingleObject" 'function)))

(cffi:defcfun ("_wrap_btCollisionObject_serializeSingleObject" #.(bullet-wrap::swig-lispify "btCollisionObject_serializeSingleObject" 'function)) :void
  (self :pointer)
  (serializer :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObject_serializeSingleObject" 'function))

(cffi:defcstruct #.(bullet-wrap::swig-lispify "btCollisionObjectDoubleData" 'classname)
	(#.(bullet-wrap::swig-lispify "m_broadphaseHandle" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_collisionShape" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_rootCollisionShape" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_name" 'slotname) :string)
	(#.(bullet-wrap::swig-lispify "m_worldTransform" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_interpolationWorldTransform" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_interpolationLinearVelocity" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_interpolationAngularVelocity" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_anisotropicFriction" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_contactProcessingThreshold" 'slotname) :double)
	(#.(bullet-wrap::swig-lispify "m_deactivationTime" 'slotname) :double)
	(#.(bullet-wrap::swig-lispify "m_friction" 'slotname) :double)
	(#.(bullet-wrap::swig-lispify "m_rollingFriction" 'slotname) :double)
	(#.(bullet-wrap::swig-lispify "m_restitution" 'slotname) :double)
	(#.(bullet-wrap::swig-lispify "m_hitFraction" 'slotname) :double)
	(#.(bullet-wrap::swig-lispify "m_ccdSweptSphereRadius" 'slotname) :double)
	(#.(bullet-wrap::swig-lispify "m_ccdMotionThreshold" 'slotname) :double)
	(#.(bullet-wrap::swig-lispify "m_hasAnisotropicFriction" 'slotname) :int)
	(#.(bullet-wrap::swig-lispify "m_collisionFlags" 'slotname) :int)
	(#.(bullet-wrap::swig-lispify "m_islandTag1" 'slotname) :int)
	(#.(bullet-wrap::swig-lispify "m_companionId" 'slotname) :int)
	(#.(bullet-wrap::swig-lispify "m_activationState1" 'slotname) :int)
	(#.(bullet-wrap::swig-lispify "m_internalType" 'slotname) :int)
	(#.(bullet-wrap::swig-lispify "m_checkCollideWith" 'slotname) :int)
	(#.(bullet-wrap::swig-lispify "m_padding" 'slotname) :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObjectDoubleData" 'classname))

(cl:export '#.(bullet-wrap::swig-lispify "m_broadphaseHandle" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_collisionShape" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_rootCollisionShape" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_name" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_worldTransform" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_interpolationWorldTransform" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_interpolationLinearVelocity" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_interpolationAngularVelocity" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_anisotropicFriction" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_contactProcessingThreshold" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_deactivationTime" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_friction" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_rollingFriction" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_restitution" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_hitFraction" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_ccdSweptSphereRadius" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_ccdMotionThreshold" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_hasAnisotropicFriction" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_collisionFlags" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_islandTag1" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_companionId" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_activationState1" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_internalType" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_checkCollideWith" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_padding" 'slotname))

(cffi:defcstruct #.(bullet-wrap::swig-lispify "btCollisionObjectFloatData" 'classname)
	(#.(bullet-wrap::swig-lispify "m_broadphaseHandle" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_collisionShape" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_rootCollisionShape" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_name" 'slotname) :string)
	(#.(bullet-wrap::swig-lispify "m_worldTransform" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_interpolationWorldTransform" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_interpolationLinearVelocity" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_interpolationAngularVelocity" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_anisotropicFriction" 'slotname) :pointer)
	(#.(bullet-wrap::swig-lispify "m_contactProcessingThreshold" 'slotname) :float)
	(#.(bullet-wrap::swig-lispify "m_deactivationTime" 'slotname) :float)
	(#.(bullet-wrap::swig-lispify "m_friction" 'slotname) :float)
	(#.(bullet-wrap::swig-lispify "m_rollingFriction" 'slotname) :float)
	(#.(bullet-wrap::swig-lispify "m_restitution" 'slotname) :float)
	(#.(bullet-wrap::swig-lispify "m_hitFraction" 'slotname) :float)
	(#.(bullet-wrap::swig-lispify "m_ccdSweptSphereRadius" 'slotname) :float)
	(#.(bullet-wrap::swig-lispify "m_ccdMotionThreshold" 'slotname) :float)
	(#.(bullet-wrap::swig-lispify "m_hasAnisotropicFriction" 'slotname) :int)
	(#.(bullet-wrap::swig-lispify "m_collisionFlags" 'slotname) :int)
	(#.(bullet-wrap::swig-lispify "m_islandTag1" 'slotname) :int)
	(#.(bullet-wrap::swig-lispify "m_companionId" 'slotname) :int)
	(#.(bullet-wrap::swig-lispify "m_activationState1" 'slotname) :int)
	(#.(bullet-wrap::swig-lispify "m_internalType" 'slotname) :int)
	(#.(bullet-wrap::swig-lispify "m_checkCollideWith" 'slotname) :int)
	(#.(bullet-wrap::swig-lispify "m_padding" 'slotname) :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btCollisionObjectFloatData" 'classname))

(cl:export '#.(bullet-wrap::swig-lispify "m_broadphaseHandle" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_collisionShape" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_rootCollisionShape" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_name" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_worldTransform" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_interpolationWorldTransform" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_interpolationLinearVelocity" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_interpolationAngularVelocity" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_anisotropicFriction" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_contactProcessingThreshold" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_deactivationTime" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_friction" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_rollingFriction" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_restitution" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_hitFraction" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_ccdSweptSphereRadius" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_ccdMotionThreshold" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_hasAnisotropicFriction" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_collisionFlags" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_islandTag1" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_companionId" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_activationState1" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_internalType" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_checkCollideWith" 'slotname))

(cl:export '#.(bullet-wrap::swig-lispify "m_padding" 'slotname))

(cffi:defcenum #.(bullet-wrap::swig-lispify "DispatcherFlags" 'enumname)
	(#.(bullet-wrap::swig-lispify "CD_STATIC_STATIC_REPORTED" 'enumvalue :keyword) #.1)
	(#.(bullet-wrap::swig-lispify "CD_USE_RELATIVE_CONTACT_BREAKING_THRESHOLD" 'enumvalue :keyword) #.2)
	(#.(bullet-wrap::swig-lispify "CD_DISABLE_CONTACTPOOL_DYNAMIC_ALLOCATION" 'enumvalue :keyword) #.4))

(cl:export '#.(bullet-wrap::swig-lispify "DispatcherFlags" 'enumname))

(defanonenum 
	(#.(bullet-wrap::swig-lispify "DYNAMIC_SET" 'enumvalue) #.0)
	(#.(bullet-wrap::swig-lispify "FIXED_SET" 'enumvalue) #.1)
	(#.(bullet-wrap::swig-lispify "STAGECOUNT" 'enumvalue) #.2))

(cl:export '#.(bullet-wrap::swig-lispify "DYNAMIC_SET" 'enumvalue))

(cl:export '#.(bullet-wrap::swig-lispify "FIXED_SET" 'enumvalue))

(cl:export '#.(bullet-wrap::swig-lispify "STAGECOUNT" 'enumvalue))

(cffi:defcenum #.(bullet-wrap::swig-lispify "DebugDrawModes" 'enumname)
	(#.(bullet-wrap::swig-lispify "DBG_NoDebug" 'enumvalue :keyword) #.0)
	(#.(bullet-wrap::swig-lispify "DBG_DrawWireframe" 'enumvalue :keyword) #.1)
	(#.(bullet-wrap::swig-lispify "DBG_DrawAabb" 'enumvalue :keyword) #.2)
	(#.(bullet-wrap::swig-lispify "DBG_DrawFeaturesText" 'enumvalue :keyword) #.4)
	(#.(bullet-wrap::swig-lispify "DBG_DrawContactPoints" 'enumvalue :keyword) #.8)
	(#.(bullet-wrap::swig-lispify "DBG_NoDeactivation" 'enumvalue :keyword) #.16)
	(#.(bullet-wrap::swig-lispify "DBG_NoHelpText" 'enumvalue :keyword) #.32)
	(#.(bullet-wrap::swig-lispify "DBG_DrawText" 'enumvalue :keyword) #.64)
	(#.(bullet-wrap::swig-lispify "DBG_ProfileTimings" 'enumvalue :keyword) #.128)
	(#.(bullet-wrap::swig-lispify "DBG_EnableSatComparison" 'enumvalue :keyword) #.256)
	(#.(bullet-wrap::swig-lispify "DBG_DisableBulletLCP" 'enumvalue :keyword) #.512)
	(#.(bullet-wrap::swig-lispify "DBG_EnableCCD" 'enumvalue :keyword) #.1024)
	(#.(bullet-wrap::swig-lispify "DBG_DrawConstraints" 'enumvalue :keyword) #.(cl:ash 1 11))
	(#.(bullet-wrap::swig-lispify "DBG_DrawConstraintLimits" 'enumvalue :keyword) #.(cl:ash 1 12))
	(#.(bullet-wrap::swig-lispify "DBG_FastWireframe" 'enumvalue :keyword) #.(cl:ash 1 13))
	(#.(bullet-wrap::swig-lispify "DBG_DrawNormals" 'enumvalue :keyword) #.(cl:ash 1 14))
	#.(bullet-wrap::swig-lispify "DBG_MAX_DEBUG_DRAW_MODE" 'enumvalue :keyword))

(cl:export '#.(bullet-wrap::swig-lispify "DebugDrawModes" 'enumname))

(cffi:defcenum #.(bullet-wrap::swig-lispify "btSerializationFlags" 'enumname)
	(#.(bullet-wrap::swig-lispify "BT_SERIALIZE_NO_BVH" 'enumvalue :keyword) #.1)
	(#.(bullet-wrap::swig-lispify "BT_SERIALIZE_NO_TRIANGLEINFOMAP" 'enumvalue :keyword) #.2)
	(#.(bullet-wrap::swig-lispify "BT_SERIALIZE_NO_DUPLICATE_ASSERT" 'enumvalue :keyword) #.4))

(cl:export '#.(bullet-wrap::swig-lispify "btSerializationFlags" 'enumname))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "new_btDiscreteDynamicsWorld" 'function)))

(cffi:defcfun ("_wrap_new_btDiscreteDynamicsWorld" #.(bullet-wrap::swig-lispify "new_btDiscreteDynamicsWorld" 'function)) :pointer
  (dispatcher :pointer)
  (pairCache :pointer)
  (constraintSolver :pointer)
  (collisionConfiguration :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "new_btDiscreteDynamicsWorld" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "delete_btDiscreteDynamicsWorld" 'function)))

(cffi:defcfun ("_wrap_delete_btDiscreteDynamicsWorld" #.(bullet-wrap::swig-lispify "delete_btDiscreteDynamicsWorld" 'function)) :void
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "delete_btDiscreteDynamicsWorld" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_stepSimulation" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_stepSimulation__SWIG_0" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_stepSimulation" 'function)) :int
  (self :pointer)
  (timeStep :float)
  (maxSubSteps :int)
  (fixedTimeStep :float))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_stepSimulation" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_stepSimulation" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_stepSimulation__SWIG_1" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_stepSimulation" 'function)) :int
  (self :pointer)
  (timeStep :float)
  (maxSubSteps :int))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_stepSimulation" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_stepSimulation" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_stepSimulation__SWIG_2" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_stepSimulation" 'function)) :int
  (self :pointer)
  (timeStep :float))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_stepSimulation" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_synchronizeMotionStates" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_synchronizeMotionStates" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_synchronizeMotionStates" 'function)) :void
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_synchronizeMotionStates" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_synchronizeSingleMotionState" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_synchronizeSingleMotionState" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_synchronizeSingleMotionState" 'function)) :void
  (self :pointer)
  (body :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_synchronizeSingleMotionState" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_addConstraint" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_addConstraint__SWIG_0" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_addConstraint" 'function)) :void
  (self :pointer)
  (constraint :pointer)
  (disableCollisionsBetweenLinkedBodies :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_addConstraint" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_addConstraint" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_addConstraint__SWIG_1" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_addConstraint" 'function)) :void
  (self :pointer)
  (constraint :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_addConstraint" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_removeConstraint" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_removeConstraint" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_removeConstraint" 'function)) :void
  (self :pointer)
  (constraint :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_removeConstraint" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_addAction" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_addAction" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_addAction" 'function)) :void
  (self :pointer)
  (arg1 :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_addAction" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_removeAction" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_removeAction" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_removeAction" 'function)) :void
  (self :pointer)
  (arg1 :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_removeAction" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getSimulationIslandManager" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_getSimulationIslandManager__SWIG_0" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getSimulationIslandManager" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getSimulationIslandManager" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getSimulationIslandManager" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_getSimulationIslandManager__SWIG_1" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getSimulationIslandManager" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getSimulationIslandManager" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getCollisionWorld" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_getCollisionWorld" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getCollisionWorld" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getCollisionWorld" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_setGravity" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_setGravity" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_setGravity" 'function)) :void
  (self :pointer)
  (gravity :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_setGravity" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getGravity" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_getGravity" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getGravity" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getGravity" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_addCollisionObject" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_addCollisionObject__SWIG_0" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_addCollisionObject" 'function)) :void
  (self :pointer)
  (collisionObject :pointer)
  (collisionFilterGroup :short)
  (collisionFilterMask :short))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_addCollisionObject" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_addCollisionObject" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_addCollisionObject__SWIG_1" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_addCollisionObject" 'function)) :void
  (self :pointer)
  (collisionObject :pointer)
  (collisionFilterGroup :short))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_addCollisionObject" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_addCollisionObject" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_addCollisionObject__SWIG_2" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_addCollisionObject" 'function)) :void
  (self :pointer)
  (collisionObject :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_addCollisionObject" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_addRigidBody" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_addRigidBody__SWIG_0" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_addRigidBody" 'function)) :void
  (self :pointer)
  (body :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_addRigidBody" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_addRigidBody" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_addRigidBody__SWIG_1" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_addRigidBody" 'function)) :void
  (self :pointer)
  (body :pointer)
  (group :short)
  (mask :short))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_addRigidBody" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_removeRigidBody" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_removeRigidBody" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_removeRigidBody" 'function)) :void
  (self :pointer)
  (body :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_removeRigidBody" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_removeCollisionObject" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_removeCollisionObject" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_removeCollisionObject" 'function)) :void
  (self :pointer)
  (collisionObject :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_removeCollisionObject" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_debugDrawConstraint" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_debugDrawConstraint" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_debugDrawConstraint" 'function)) :void
  (self :pointer)
  (constraint :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_debugDrawConstraint" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_debugDrawWorld" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_debugDrawWorld" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_debugDrawWorld" 'function)) :void
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_debugDrawWorld" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_setConstraintSolver" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_setConstraintSolver" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_setConstraintSolver" 'function)) :void
  (self :pointer)
  (solver :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_setConstraintSolver" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getConstraintSolver" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_getConstraintSolver" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getConstraintSolver" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getConstraintSolver" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getNumConstraints" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_getNumConstraints" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getNumConstraints" 'function)) :int
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getNumConstraints" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getConstraint" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_getConstraint__SWIG_0" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getConstraint" 'function)) :pointer
  (self :pointer)
  (index :int))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getConstraint" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getConstraint" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_getConstraint__SWIG_1" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getConstraint" 'function)) :pointer
  (self :pointer)
  (index :int))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getConstraint" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getWorldType" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_getWorldType" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getWorldType" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getWorldType" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_clearForces" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_clearForces" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_clearForces" 'function)) :void
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_clearForces" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_applyGravity" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_applyGravity" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_applyGravity" 'function)) :void
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_applyGravity" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_setNumTasks" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_setNumTasks" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_setNumTasks" 'function)) :void
  (self :pointer)
  (numTasks :int))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_setNumTasks" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_updateVehicles" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_updateVehicles" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_updateVehicles" 'function)) :void
  (self :pointer)
  (timeStep :float))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_updateVehicles" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_addVehicle" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_addVehicle" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_addVehicle" 'function)) :void
  (self :pointer)
  (vehicle :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_addVehicle" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_removeVehicle" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_removeVehicle" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_removeVehicle" 'function)) :void
  (self :pointer)
  (vehicle :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_removeVehicle" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_addCharacter" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_addCharacter" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_addCharacter" 'function)) :void
  (self :pointer)
  (character :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_addCharacter" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_removeCharacter" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_removeCharacter" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_removeCharacter" 'function)) :void
  (self :pointer)
  (character :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_removeCharacter" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_setSynchronizeAllMotionStates" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_setSynchronizeAllMotionStates" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_setSynchronizeAllMotionStates" 'function)) :void
  (self :pointer)
  (synchronizeAll :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_setSynchronizeAllMotionStates" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getSynchronizeAllMotionStates" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_getSynchronizeAllMotionStates" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getSynchronizeAllMotionStates" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getSynchronizeAllMotionStates" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution" 'function)) :void
  (self :pointer)
  (enable :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_serialize" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_serialize" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_serialize" 'function)) :void
  (self :pointer)
  (serializer :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_serialize" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_setLatencyMotionStateInterpolation" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_setLatencyMotionStateInterpolation" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_setLatencyMotionStateInterpolation" 'function)) :void
  (self :pointer)
  (latencyInterpolation :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_setLatencyMotionStateInterpolation" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getLatencyMotionStateInterpolation" 'function)))

(cffi:defcfun ("_wrap_btDiscreteDynamicsWorld_getLatencyMotionStateInterpolation" #.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getLatencyMotionStateInterpolation" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btDiscreteDynamicsWorld_getLatencyMotionStateInterpolation" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "new_btSimpleDynamicsWorld" 'function)))

(cffi:defcfun ("_wrap_new_btSimpleDynamicsWorld" #.(bullet-wrap::swig-lispify "new_btSimpleDynamicsWorld" 'function)) :pointer
  (dispatcher :pointer)
  (pairCache :pointer)
  (constraintSolver :pointer)
  (collisionConfiguration :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "new_btSimpleDynamicsWorld" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "delete_btSimpleDynamicsWorld" 'function)))

(cffi:defcfun ("_wrap_delete_btSimpleDynamicsWorld" #.(bullet-wrap::swig-lispify "delete_btSimpleDynamicsWorld" 'function)) :void
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "delete_btSimpleDynamicsWorld" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_stepSimulation" 'function)))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_stepSimulation__SWIG_0" #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_stepSimulation" 'function)) :int
  (self :pointer)
  (timeStep :float)
  (maxSubSteps :int)
  (fixedTimeStep :float))

(cl:export '#.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_stepSimulation" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_stepSimulation" 'function)))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_stepSimulation__SWIG_1" #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_stepSimulation" 'function)) :int
  (self :pointer)
  (timeStep :float)
  (maxSubSteps :int))

(cl:export '#.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_stepSimulation" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_stepSimulation" 'function)))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_stepSimulation__SWIG_2" #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_stepSimulation" 'function)) :int
  (self :pointer)
  (timeStep :float))

(cl:export '#.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_stepSimulation" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_setGravity" 'function)))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_setGravity" #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_setGravity" 'function)) :void
  (self :pointer)
  (gravity :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_setGravity" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_getGravity" 'function)))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_getGravity" #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_getGravity" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_getGravity" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_addRigidBody" 'function)))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_addRigidBody__SWIG_0" #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_addRigidBody" 'function)) :void
  (self :pointer)
  (body :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_addRigidBody" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_addRigidBody" 'function)))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_addRigidBody__SWIG_1" #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_addRigidBody" 'function)) :void
  (self :pointer)
  (body :pointer)
  (group :short)
  (mask :short))

(cl:export '#.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_addRigidBody" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_removeRigidBody" 'function)))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_removeRigidBody" #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_removeRigidBody" 'function)) :void
  (self :pointer)
  (body :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_removeRigidBody" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_debugDrawWorld" 'function)))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_debugDrawWorld" #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_debugDrawWorld" 'function)) :void
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_debugDrawWorld" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_addAction" 'function)))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_addAction" #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_addAction" 'function)) :void
  (self :pointer)
  (action :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_addAction" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_removeAction" 'function)))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_removeAction" #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_removeAction" 'function)) :void
  (self :pointer)
  (action :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_removeAction" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_removeCollisionObject" 'function)))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_removeCollisionObject" #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_removeCollisionObject" 'function)) :void
  (self :pointer)
  (collisionObject :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_removeCollisionObject" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_updateAabbs" 'function)))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_updateAabbs" #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_updateAabbs" 'function)) :void
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_updateAabbs" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_synchronizeMotionStates" 'function)))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_synchronizeMotionStates" #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_synchronizeMotionStates" 'function)) :void
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_synchronizeMotionStates" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_setConstraintSolver" 'function)))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_setConstraintSolver" #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_setConstraintSolver" 'function)) :void
  (self :pointer)
  (solver :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_setConstraintSolver" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_getConstraintSolver" 'function)))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_getConstraintSolver" #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_getConstraintSolver" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_getConstraintSolver" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_getWorldType" 'function)))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_getWorldType" #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_getWorldType" 'function)) :pointer
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_getWorldType" 'function))

(cl:declaim (cl:inline #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_clearForces" 'function)))

(cffi:defcfun ("_wrap_btSimpleDynamicsWorld_clearForces" #.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_clearForces" 'function)) :void
  (self :pointer))

(cl:export '#.(bullet-wrap::swig-lispify "btSimpleDynamicsWorld_clearForces" 'function))

(cffi:defcenum #.(bullet-wrap::swig-lispify "btRigidBodyFlags" 'enumname)
	(#.(bullet-wrap::swig-lispify "BT_DISABLE_WORLD_GRAVITY" 'enumvalue :keyword) #.1)
	(#.(bullet-wrap::swig-lispify "BT_ENABLE_GYROPSCOPIC_FORCE" 'enumvalue :keyword) #.2))

(cl:export '#.(bullet-wrap::swig-lispify "btRigidBodyFlags" 'enumname))

(cffi:defcenum #.(bullet-wrap::swig-lispify "btPoint2PointFlags" 'enumname)
	(#.(bullet-wrap::swig-lispify "BT_P2P_FLAGS_ERP" 'enumvalue :keyword) #.1)
	(#.(bullet-wrap::swig-lispify "BT_P2P_FLAGS_CFM" 'enumvalue :keyword) #.2))

(cl:export '#.(bullet-wrap::swig-lispify "btPoint2PointFlags" 'enumname))

(cffi:defcenum #.(bullet-wrap::swig-lispify "btHingeFlags" 'enumname)
	(#.(bullet-wrap::swig-lispify "BT_HINGE_FLAGS_CFM_STOP" 'enumvalue :keyword) #.1)
	(#.(bullet-wrap::swig-lispify "BT_HINGE_FLAGS_ERP_STOP" 'enumvalue :keyword) #.2)
	(#.(bullet-wrap::swig-lispify "BT_HINGE_FLAGS_CFM_NORM" 'enumvalue :keyword) #.4))

(cl:export '#.(bullet-wrap::swig-lispify "btHingeFlags" 'enumname))

(cffi:defcenum #.(bullet-wrap::swig-lispify "btConeTwistFlags" 'enumname)
	(#.(bullet-wrap::swig-lispify "BT_CONETWIST_FLAGS_LIN_CFM" 'enumvalue :keyword) #.1)
	(#.(bullet-wrap::swig-lispify "BT_CONETWIST_FLAGS_LIN_ERP" 'enumvalue :keyword) #.2)
	(#.(bullet-wrap::swig-lispify "BT_CONETWIST_FLAGS_ANG_CFM" 'enumvalue :keyword) #.4))

(cl:export '#.(bullet-wrap::swig-lispify "btConeTwistFlags" 'enumname))

(cffi:defcenum #.(bullet-wrap::swig-lispify "bt6DofFlags" 'enumname)
	(#.(bullet-wrap::swig-lispify "BT_6DOF_FLAGS_CFM_NORM" 'enumvalue :keyword) #.1)
	(#.(bullet-wrap::swig-lispify "BT_6DOF_FLAGS_CFM_STOP" 'enumvalue :keyword) #.2)
	(#.(bullet-wrap::swig-lispify "BT_6DOF_FLAGS_ERP_STOP" 'enumvalue :keyword) #.4))

(cl:export '#.(bullet-wrap::swig-lispify "bt6DofFlags" 'enumname))

(cffi:defcenum #.(bullet-wrap::swig-lispify "btSliderFlags" 'enumname)
	(#.(bullet-wrap::swig-lispify "BT_SLIDER_FLAGS_CFM_DIRLIN" 'enumvalue :keyword) #.(cl:ash 1 0))
	(#.(bullet-wrap::swig-lispify "BT_SLIDER_FLAGS_ERP_DIRLIN" 'enumvalue :keyword) #.(cl:ash 1 1))
	(#.(bullet-wrap::swig-lispify "BT_SLIDER_FLAGS_CFM_DIRANG" 'enumvalue :keyword) #.(cl:ash 1 2))
	(#.(bullet-wrap::swig-lispify "BT_SLIDER_FLAGS_ERP_DIRANG" 'enumvalue :keyword) #.(cl:ash 1 3))
	(#.(bullet-wrap::swig-lispify "BT_SLIDER_FLAGS_CFM_ORTLIN" 'enumvalue :keyword) #.(cl:ash 1 4))
	(#.(bullet-wrap::swig-lispify "BT_SLIDER_FLAGS_ERP_ORTLIN" 'enumvalue :keyword) #.(cl:ash 1 5))
	(#.(bullet-wrap::swig-lispify "BT_SLIDER_FLAGS_CFM_ORTANG" 'enumvalue :keyword) #.(cl:ash 1 6))
	(#.(bullet-wrap::swig-lispify "BT_SLIDER_FLAGS_ERP_ORTANG" 'enumvalue :keyword) #.(cl:ash 1 7))
	(#.(bullet-wrap::swig-lispify "BT_SLIDER_FLAGS_CFM_LIMLIN" 'enumvalue :keyword) #.(cl:ash 1 8))
	(#.(bullet-wrap::swig-lispify "BT_SLIDER_FLAGS_ERP_LIMLIN" 'enumvalue :keyword) #.(cl:ash 1 9))
	(#.(bullet-wrap::swig-lispify "BT_SLIDER_FLAGS_CFM_LIMANG" 'enumvalue :keyword) #.(cl:ash 1 10))
	(#.(bullet-wrap::swig-lispify "BT_SLIDER_FLAGS_ERP_LIMANG" 'enumvalue :keyword) #.(cl:ash 1 11)))

(cl:export '#.(bullet-wrap::swig-lispify "btSliderFlags" 'enumname))


